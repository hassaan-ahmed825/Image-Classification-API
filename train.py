# -*- coding: utf-8 -*-
"""projectTensor(real).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cVPZHyq9-D7ocsExbK2RdxH3A2icq834
"""

!unzip TensorFlow model.zip

!ls

!unzip "TensorFlow model.zip"

!ls

!ls "TensorFlow model"

!ls "archive (6)"

!ls

!ls "TensorFlow model"

!unzip archive\ \(6\).zip

!ls "TensorFlow model"

!ls "TensorFlow model/archive (6)"

import tensorflow as tf
import os

# Path to your dataset
data_dir = "TensorFlow model/archive (6)/flowers"

# Basic config
batch_size = 32
img_height = 180
img_width = 180

# Create training dataset
train_ds = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,   # 80% train, 20% val
    subset="training",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

# Create validation dataset
val_ds = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="validation",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

# Prefetch for performance
AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.prefetch(buffer_size=AUTOTUNE)

# ----------------------------
# üìå Import MobileNetV2 & Keras layers
# ----------------------------
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import layers, models

# ----------------------------
# üìå Define input image shape
# ----------------------------
IMG_SHAPE = (img_height, img_width, 3)  # height, width, color channels (RGB)

# ----------------------------
# üìå Load the MobileNetV2 model
# - input_shape: your image size
# - include_top=False: remove original classifier
# - weights='imagenet': use pretrained weights
# ----------------------------
base_model = MobileNetV2(input_shape=IMG_SHAPE,
                         include_top=False,
                         weights='imagenet')

# ----------------------------
# üìå Freeze the base model
# - So that pretrained weights don‚Äôt change during training
# - We only train our custom layers
# ----------------------------
base_model.trainable = False

# ----------------------------
# üìå Add custom classification head
# - GlobalAveragePooling2D: reduces feature maps to a vector
# - Dense(128): fully connected layer with ReLU
# - Dropout: prevent overfitting
# - Dense(5): output layer for 5 classes, softmax for probabilities
# ----------------------------
model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(5, activation='softmax')  # 5 flower classes
])

# ----------------------------
# üìå Compile the model
# - optimizer: Adam is simple & effective
# - loss: sparse_categorical_crossentropy for integer labels
# - metrics: track accuracy
# ----------------------------
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# ----------------------------
# üìå Train the model
# - feed training & validation data
# - adjust epochs as needed
# ----------------------------
history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=5  # try more epochs for better results!
)

# Continue training for more epochs ‚Äî let's do 10 more!
history_fine = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=15  # original was 5, so total will be 15
)

# 1Ô∏è‚É£ Unfreeze the base model
base_model.trainable = True

# 2Ô∏è‚É£ Compile with a lower learning rate
model.compile(
    optimizer=tf.keras.optimizers.Adam(1e-5),  # small LR
    loss=tf.keras.losses.SparseCategoricalCrossentropy(),
    metrics=['accuracy']
)

# 3Ô∏è‚É£ Continue training for a few more epochs
history_fine = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=5  # fine-tuning epochs
)

# model.save('flowers_classifier_finetuned.h5')
from keras.saving import save_model
save_model(model, "flowers_model.keras")
#you can load it like this
#model = keras.models.load_model("flowers_model.keras")

raw_train_ds = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="training",
    seed=123,
    image_size=(180, 180),
    batch_size=32
)

class_names = raw_train_ds.class_names
print("Classes:", class_names)

from google.colab import files
uploaded = files.upload()

# # #prediction cell
# # img = tf.keras.utils.load_img("12240303_80d87f77a3_n.jpg", target_size=(180, 180))
# # img_array = tf.keras.utils.img_to_array(img)
# # img_array = tf.expand_dims(img_array, 0)  # Add batch dimension

# # predictions = model.predict(img_array)
# # predicted_class = tf.argmax(predictions[0])

# # print("Predicted index:", predicted_class.numpy())
# # print("Predicted class:", class_names[predicted_class])
# import os
# import numpy as np
# from tensorflow.keras.preprocessing import image

# # The folder containing test images

# import os
# import tensorflow as tf
# import numpy as np
# from PIL import Image

# # Put your main data directory here
# base_dir = 'flowers'

# # Get your class names (subfolders)
# class_names = sorted(os.listdir(base_dir))

# # Loop over each class folder
# for class_name in class_names:
#     class_folder = os.path.join(base_dir, class_name)
#     if not os.path.isdir(class_folder):
#         continue

#     # Loop over each image in the folder
#     for img_name in os.listdir(class_folder):
#         img_path = os.path.join(class_folder, img_name)
#         img = Image.open(img_path).resize((224, 224))
#         img_array = tf.keras.utils.img_to_array(img)
#         img_array = tf.expand_dims(img_array, 0)

#         prediction = model.predict(img_array)
#         predicted_index = np.argmax(prediction[0])
#         predicted_class = class_names[predicted_index]

#         print(f"File: {img_name} | True: {class_name} | Predicted: {predicted_class}")
import os
import random
import tensorflow as tf
import numpy as np
from PIL import Image
from pathlib import Path  #  ADD THIS

# ---------------------------
#  CORRECT way to set base_dir with Path
# ---------------------------
base_dir = Path('TensorFlow model') / 'archive (6)' / 'flowers'

# ---------------------------
#  Get class names from Path, but keep os.listdir for compatibility
# ---------------------------
class_names = sorted(os.listdir(base_dir))

# ---------------------------
#  Collect all images
# ---------------------------
all_images = []
for class_name in class_names:
    class_folder = base_dir / class_name
    if not class_folder.is_dir():
        continue
    images = os.listdir(class_folder)
    for img in images:
        all_images.append( (class_name, class_folder / img) )

# ---------------------------
#  Pick 5 random images
# ---------------------------
sample_images = random.sample(all_images, 5)

# ---------------------------
#  Predict each image
# ---------------------------
for true_class, img_path in sample_images:
    img = Image.open(img_path).resize((180, 180))
    img_array = tf.keras.utils.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)

    prediction = model.predict(img_array)
    predicted_index = np.argmax(prediction[0])
    predicted_class = class_names[predicted_index]

    print(f"File: {img_path.name} | True: {true_class} | Predicted: {predicted_class}")

# # import matplotlib.pyplot as plt

# # Loop through the 5 random images
# for true_class, img_path in sample_images:
#     img = Image.open(img_path).resize((180, 180))
#     img_array = tf.keras.utils.img_to_array(img)
#     img_array = tf.expand_dims(img_array, 0)

#     prediction = model.predict(img_array)
#     predicted_index = np.argmax(prediction[0])
#     predicted_class = class_names[predicted_index]

#     print(f"File: {os.path.basename(img_path)} | True: {true_class} | Predicted: {predicted_class}")

#     # Show image with title
#     plt.imshow(img)
#     plt.title(f"True: {true_class} | Predicted: {predicted_class}")
#     plt.axis('off')
#     plt.show()
import matplotlib.pyplot as plt

# Create output folder to save plots
output_dir = 'prediction_plots'
os.makedirs(output_dir, exist_ok=True)

# Loop through the 5 random images
for i, (true_class, img_path) in enumerate(sample_images, start=1):
    img = Image.open(img_path).resize((180, 180))
    img_array = tf.keras.utils.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)

    prediction = model.predict(img_array)
    predicted_index = np.argmax(prediction[0])
    predicted_class = class_names[predicted_index]

    print(f"File: {os.path.basename(img_path)} | True: {true_class} | Predicted: {predicted_class}")

    plt.imshow(img)
    plt.title(f"True: {true_class} | Predicted: {predicted_class}")
    plt.axis('off')
    plt.show()

    # Save the plot
    save_path = os.path.join(output_dir, f"image_{i}_{os.path.basename(img_path)}.png")
    plt.savefig(save_path)
    print(f"Saved plot to: {save_path}\n")

from google.colab import files
files.download('flowers_model.keras')

